// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ActorState : int {
  ACTOR_STATE_NONE = 0,
  ACTOR_STATE_IDLE = 1,
  ACTOR_STATE_MOVING = 2,
  ACTOR_STATE_SKILL = 3,
  ACTOR_STATE_DEAD = 4,
  ActorState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActorState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActorState_IsValid(int value);
constexpr ActorState ActorState_MIN = ACTOR_STATE_NONE;
constexpr ActorState ActorState_MAX = ACTOR_STATE_DEAD;
constexpr int ActorState_ARRAYSIZE = ActorState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorState_descriptor();
template<typename T>
inline const std::string& ActorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActorState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActorState_descriptor(), enum_t_value);
}
inline bool ActorState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActorState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActorState>(
    ActorState_descriptor(), name, value);
}
enum ActorType : int {
  ACTOR_TYPE_NONE = 0,
  ACTOR_TYPE_PLAYER = 1,
  ACTOR_TYPE_MONSTER = 2,
  ACTOR_TYPE_PROJECTILE = 3,
  ACTOR_TYPE_ITEM_HOLDER = 4,
  ActorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActorType_IsValid(int value);
constexpr ActorType ActorType_MIN = ACTOR_TYPE_NONE;
constexpr ActorType ActorType_MAX = ACTOR_TYPE_ITEM_HOLDER;
constexpr int ActorType_ARRAYSIZE = ActorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorType_descriptor();
template<typename T>
inline const std::string& ActorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActorType_descriptor(), enum_t_value);
}
inline bool ActorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActorType>(
    ActorType_descriptor(), name, value);
}
enum TileCollisionType : int {
  TILE_COLLISION_TYPE_NONE = 0,
  TILE_COLLISION_TYPE_ENV = 1,
  TileCollisionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TileCollisionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TileCollisionType_IsValid(int value);
constexpr TileCollisionType TileCollisionType_MIN = TILE_COLLISION_TYPE_NONE;
constexpr TileCollisionType TileCollisionType_MAX = TILE_COLLISION_TYPE_ENV;
constexpr int TileCollisionType_ARRAYSIZE = TileCollisionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TileCollisionType_descriptor();
template<typename T>
inline const std::string& TileCollisionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TileCollisionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TileCollisionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TileCollisionType_descriptor(), enum_t_value);
}
inline bool TileCollisionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TileCollisionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TileCollisionType>(
    TileCollisionType_descriptor(), name, value);
}
enum FindPathResult : int {
  FIND_PATH_RESULT_NONE = 0,
  FIND_PATH_RESULT_FAIL_LERPCELL = 1,
  FIND_PATH_RESULT_FAIL_NO_PATH = 2,
  FIND_PATH_RESULT_FAIL_MOVE_TO = 3,
  FIND_PATH_RESULT_FAIL_SAME_POSITION = 4,
  FIND_PATH_RESULT_SUCCESS = 5,
  FindPathResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FindPathResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FindPathResult_IsValid(int value);
constexpr FindPathResult FindPathResult_MIN = FIND_PATH_RESULT_NONE;
constexpr FindPathResult FindPathResult_MAX = FIND_PATH_RESULT_SUCCESS;
constexpr int FindPathResult_ARRAYSIZE = FindPathResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindPathResult_descriptor();
template<typename T>
inline const std::string& FindPathResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FindPathResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FindPathResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FindPathResult_descriptor(), enum_t_value);
}
inline bool FindPathResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FindPathResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FindPathResult>(
    FindPathResult_descriptor(), name, value);
}
enum MoveDir : int {
  MOVE_DIR_NONE = 0,
  MOVE_DIR_UP = 1,
  MOVE_DIR_DOWN = 2,
  MOVE_DIR_LEFT = 3,
  MOVE_DIR_RIGHT = 4,
  MOVE_DIR_UP_LEFT = 5,
  MOVE_DIR_UP_RIGHT = 6,
  MOVE_DIR_DOWN_LEFT = 7,
  MOVE_DIR_DOWN_RIGHT = 8,
  MoveDir_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MoveDir_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MoveDir_IsValid(int value);
constexpr MoveDir MoveDir_MIN = MOVE_DIR_NONE;
constexpr MoveDir MoveDir_MAX = MOVE_DIR_DOWN_RIGHT;
constexpr int MoveDir_ARRAYSIZE = MoveDir_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveDir_descriptor();
template<typename T>
inline const std::string& MoveDir_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveDir>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveDir_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveDir_descriptor(), enum_t_value);
}
inline bool MoveDir_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveDir* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveDir>(
    MoveDir_descriptor(), name, value);
}
enum ServerType : int {
  SERVER_TYPE_GAME_SERVER = 0,
  SERVER_TYPE_MONITORING_SERVER = 1,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerType_IsValid(int value);
constexpr ServerType ServerType_MIN = SERVER_TYPE_GAME_SERVER;
constexpr ServerType ServerType_MAX = SERVER_TYPE_MONITORING_SERVER;
constexpr int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerType_descriptor();
template<typename T>
inline const std::string& ServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerType_descriptor(), enum_t_value);
}
inline bool ServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ActorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ActorState>() {
  return ::Protocol::ActorState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ActorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ActorType>() {
  return ::Protocol::ActorType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::TileCollisionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::TileCollisionType>() {
  return ::Protocol::TileCollisionType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::FindPathResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::FindPathResult>() {
  return ::Protocol::FindPathResult_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MoveDir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MoveDir>() {
  return ::Protocol::MoveDir_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ServerType>() {
  return ::Protocol::ServerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
